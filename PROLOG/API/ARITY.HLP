PREDICATE LISTING
Arity/Prolog Version 6.0
January 1991
Copyright (c) 1991, Arity Corporation
-------------------------------------

;
          Specifies a disjunction of goals.

!
          The cut goal; controls and limits searches.

[! !]
          Snips; the goal or goals within  the  snip symbols
          are skipped during backtracking.

E1 < E2
          Determines whether the value of  E1  is  less than
          E2.

T1 = T2
          Attempts to unify T1 and T2.

T1 \= T2
          Fails if T1 unifies with T2.

Struct =.. List
          Referred to as univ.  Converts  a  structure  to a
          list, or a list to a structure.

E1 =< E2
          Determines whether the value of E1 is less than or
          equal to the value of E2.

E1 > E2
          Determines whether the value of E1 is greater than
          the value of E2.

E1 >= E2
          Determines whether the value of E1 is greater than
          or equal to the value of E2.

E1 =:= E2
          Determines whether the values  of  E1  and  E2 are
          equal.

E1 =\= E2
          Determines whether the values of E1 and E2 are not
          equal.

T1 == T2
          Determines whether terms T1 and T2 are equivalent.

\+ P
          Succeeds if the goal P fails; fails if P succeeds.
          Same as not(P).

T1 \== T2
          Determines  whether  terms   T1  and  T2  are  not
          equivalent.

T1 @< T2
          Determines whether T1 is before T2.

T1 @=< T2
          Determines whether T1 is before or equal to T2.

T1 @> T2
          Determines whether T1 is after T2.

T1 @>= T2
          Determines whether T1 is after or equal to T2.

[Filename,Filename,...]
          Reads clauses into the database from  a  file with
          the   consult   predicate.  -Filename   uses   the
          reconsult predicate.

abolish(+Name/Arity)
          Removes all clauses with  the  specified  name and
          arity from the database.

abort(+Code)
          Goes to restart predicate. If there is  no restart
          predicate,   a   compiled   program   halts    and
          interpreted program returns to the interpreter.

api_mono
	  Converts environment to black and white.  If you save
	  your database, any changes become permanent.

arg(+N,+Term,-Value)
          Unifies Value with the Nth argument of a term.

arg0(+N,+Term,-Value)
          Unifies Value with the N+1th argument of a term.

argrep(+Term,+N,+Arg,-Newterm)
          Replaces the Nth  argument  in a term with Arg and
          returns the result to Newterm.

assert(+Clause)
          Adds  a  clause  to  a  predicate.  Equivalent  to
          assertz.

asserta(+Clause)
          Adds  a  clause  to the beginning of  a  chain  of
          clauses for a predicate.

assertz(+Clause)
          Adds a clause to the end of a chain of clauses for
          a predicate.

atom(?X)
          Succeeds when X is an atom.

atom_string(?Atom,?String)
          Converts  an  atom  to a string, or a string to an
          atom. If both Atom  and  String  are instantiated,
          checks for equivalence.

atomic(?X)
          Succeeds if X is an atomic data type.

bagof(?Term,+Goal,-Bag)
          Returns  in an unordered list (Bag) all  instances
          of Term where Goal is satisfied.

betweenb(+Tree_name,?Key1,?Key2,?Relation1,?Relation2,?Key,?Term)
          Returns the terms in  a  b-tree  between  Key1 and
          Key2.  The  Relation1   and   Relation2  arguments
          indicate  whether the limit keys are returned  and
          can be <, >, or =.

betweenkeysb(+Tree_name,?Key1,?Key2,?Key)
          Returns only the  keys  between Key1 and Key2 in a
          b-tree.

break
          Suspends execution of a program and places  you at
          the interpreter prompt. You can resume the program
          by pressing Ctrl-z.

btree_count(+Btree,-/+Count)
	  Returns the number of keys in the btree.

call(+P)
          Calls the interpreted goal  P  and  succeeds  if P
          succeeds.

case(+[A1 -> B1, A2 -> B2,...|C])
          Executes B1 if A1 succeeds, else executes B2 if A2
          succeeds, and so on.  If  none  of  the situations
          succeed, C is executed.

case(+[A1 -> B1, A2 -> B2,...])
          Executes B1 if A1 succeeds, else executes B2 if A2
          succeeds, and so on.  If  none  of  the situations
          succeed, case succeeds.

chdir(?Path)
          Changes or returns the current directory.

chmod(+Filename,?Attributes)
          Changes or returns the attribute byte of a file.

clause(+Head,-Body)
          Unifies Head and Body with the respective head and
          body of a clause. Head must be instantiated.

close(+Handle)
          Closes the file specified by the handle.

cls
          Clears the current window and moves the  cursor to
          the upper left corner.

code_world(?Old,?New)
          Unifies the name of the  current  code  world with
          Old and then changes  the  current  code  world to
          New.

command_string(-X)
          Returns a  command  line  argument  as  a  string,
          including  any spaces between the command and  the
          first argument.

compare(-Comp,+T1,+T2)
          Compares terms T1 and T2 in the standard order and
          unifies  Comp with a comparison value.  Comparison
          values are:  =, <, and >.

concat(+String1,+String2,-Result)
          Concatenates two strings  or atoms and returns the
          new string to Result.  An  ASCII  code can be used
          for a string if it is a single character.

concat(+[String1,String2,...], -Result)
          Concatenates  two  or more strings  or  atoms  and
          returns the new string to  Result.  An  ASCII code
          can  be  used  for a string  if  it  is  a  single
          character.

consult(+Filename)
          Reads clauses  into  the  database  from  a  file,
          appending  the  clauses  to  any  already  in  the
          database.

create(-Handle,+Filename)
          Creates and  opens  a  new  file  for  writing and
          returns the  file's  handle.  If  Filename already
          exists, the new file overwrites the existing file.

create_popup(?Label,?(ULR,ULC),?(LRR,LRC),?(Window_attr,Border_attr))
          Creates a pop-up window.		     

create_popup(?/+Label,(?/+X1,Y1),(?/+X2,Y2),(?/+AttClient,Attborder),?/+Border)
	  Lets you add borders to your pop-up windows.

create_world(+World_name)
          Creates a new world with the world name specified.

ctr_dec(+Ctr,-X)
          Decrements a  counter  and  returns  the counter's
          previous value.

ctr_inc(+Ctr,-X)
          Increments a  counter  and  returns  the counter's
          previous value.

ctr_is(+Ctr,-X)
          Returns the current value of a counter.

ctr_set(+Ctr,+X)
          Sets a counter to the specified value.

current_op(?Prec,?Assoc,?Op)
          Returns   through   backtracking    the   operator
          definitions currently in the database.

current_predicate(?Predicate)
          Returns through backtracking  the  predicates that
          are in the current  code  world.  If instantiated,
          the Predicate argument can be a predicate  name or
          name/arity.

current_window(-Old,?New)
          If New is instantiated, changes the current window
          to New. If New is uninstantiated, returns the name
          of the current window.

data_world(?Old,?New)
          Unifies the name of the  current  data  world with
          Old and then changes  the  current  data  world to
          New.

date(?date(Year,Month,Day))
          Sets the system clock  to  the  date  specified or
          returns the current date.

date_day(+date(Year,Month,Day),-WeekDay)
          Returns the day of the week for a given date as an
          integer between 0 (Sunday) and 6 (Saturday).

debug
          Turns the debugger on, initialy set to leep mode.

debug(+File)
	  Turns the debugger on, creates a new file and stores
	  debugger information in the file you specified.

debugger  
	  Provides debug statistics on current debug mode and 
	  spied predicates.

dec(+N,-X)
          Decrements by 1 the integer N to the value X.

define_window(+Name,?/+Label,+(?/+ULR,ULC),+(?/+LRR,LRC),+(?/+Window_attr,Border_attr))
          Creates a window.					      

define_window(Name,?/+Label,(?/+X1,Y1),(?/+X2,Y2),(?/+Attclient,Attborder),?/+Border)
	  Lets you specify borders for your windows. 

defineb(+Tree_name,+SplitSize,+Uniqueness,+Order)
          Defines the attributes for a b-tree.

defineh(+Table_Name,+HashBuckets)
          Defines the number of hash buckets to be used in a
          hash table.

delete(+Filename)
          Deletes the specified file.

delete_window(+Name)
          Deletes the window specified by Name.

delete_world(+World_name)
          Deletes a world.

dialog_run(+Dialog_key)
          Runs   a  dialog  box  with  the  default   dialog
          function.

dialog_run(+Dialog_key,+User_function,+Hook)
          Runs  a  dialog   box  and  processes  dialog  box
          information including hook.

directory(+Path,-Name,-Mode,-Time,-Date,-Size)
          Lists  the directory files specified by Path.  The
          Mode can be: 1 - read only; 2 - hidden; 4 - system
          file excluded from normal directory searches; 16 -
          directory; 32 - archive. The Size is in bytes.

disk(?DiskName)
          Sets or returns  the  default  disk  drive  to the
          letter specified. If instantiated, do  not specify
          the colon with DiskName.

display(+Term)
          Writes  a  term  in  prefix  Polish  form  to  the
          standard output device.

display(+Handle,+Term)
          Writes a term in prefix Polish form to a file.

edit(+Filename)
          Switches from the interpreter to  a user-specified
          editor to edit the file specified as Filename. The
          file is reconsulted when the editor is exited.

eq(?X,?Y)
          Determines whether  X  and  Y  are  the  same data
          object.

erase(+Ref)
          Removes the term  stored under the given reference
          number and keeps  track  of  the  terms  which are
          erased.

eraseall(+Key)
          Removes all terms stored under the key.

errcode(-OldCode,+NewCode)
          Returns the most recent syntax or  file  I/O error
          message code as OldCode, and sets the code to NewCode.

exit_dbox(+Key)
          Sends the appropriate focus(kill,New) messages and
          exits the dialog_run predicate.

exit_popup
          Deletes the current pop-up window.

expand_term(+Term,-Newterm)
          Transforms  a  term  using definite clause grammar
          notation into its equivalent Prolog term.

expunge
          Eliminates system references  to  deleted database
          terms.

fail
          This goal always fails.

file_list(+Filename)
          Saves the contents of  the  database  to  the file
          specified by Filename.

file_list(+Filename,+Name/Arity)
          Saves  the clauses specified by Name/Arity to  the
          file specified by Filename.

fileerrors(?Old,?New)
          Enables  or  disables DOS I/O  error  messages  or
          checks  the current setting of these messages.  To
          enable, set New to on. To disable, set New to off.

findall(?Term,+Goal,-List)
          Collects all  instances  of  Term  where  Goal  is
          satisfiable and returns these instances of Term in
          an unordered list.  All free variables are assumed
          to be existentially quantified.

float(?X)
          Succeeds if X is a floating-point number.

float_text(?Float,?Text,?Format)
          Converts  a  floating-point  number  to  a  string
          according to a Format specification or it converts
          a string to a  floating-point  number.  The Format
          argument can be: general - trailing 0s suppressed;
          fixed(N) - fixed format with N digits to the right
          of  the decimal point; scientific(N) -  scientific
          format with N  digits  to the right of the decimal
          point.

flush
          Removes all characters in the type-ahead buffer.

functor(?Struct,?Name,?Arity)
          Returns a structure's name and arity.

gc
          Restores  unused  stack  space.  Note   that  this
          garbage  collection  predicate is  different  than
          those for previous versions of Arity/Prolog.

get(?Char)
          Reads  the next character from the standard  input
          device,  skipping  non-printing   characters,  and
          unifies the ASCII value with Char.

get(+Handle,?Char)
          Reads the next printing  character  from  the file
          and unifies the ASCII value with Char.

get0(?Char)
          Reads  the next character from the standard  input
          device and unifies the ASCII value with  Char. The
          get0   predicate   does  not   skip   non-printing
          characters.

get0(+Handle,?Char)
          Reads the next character from the file and unifies
          the ASCII value with Char.

get0_noecho(?Char)
          Reads  the next character from the standard  input
          device and unifies the ASCII value with  Char. The
          get0_noecho predicate does not echo  the character
          to the standard output device.

get_cursor(-Low_scan,-High_scan)
          Reports the current shape of the cursor.

getEnvVar(+Variable,-/+Valve)
	  Allows you to get environment variable.  If you do
	  not specify a variable, it fails.

halt
          Exits from the interpreter  or  from  the compiled
          application.

halt(+Exit_code)
          Exits from  the  interpreter  or  compiled program
          with the exit code specified by Exit_code.

hard_erase(+Ref)
          Erases  the database term with the specified  key.
          Unlike  erase,  the  hard_erase predicate does not
          keep track of erased terms.

hide_window(?Current,+New)
          Makes  the  window specified by  New  the  current
          window and  removes  the  existing  current window
          (Current) from the screen display.

ifthen(+P,+Q)
          Executes  goal Q if goal P  succeeds.  If  goal  P
          fails, ifthen succeeds without executing Q.

ifthenelse(+P,+Q,+R)
          Executes  goal  Q if goal  P  succeeds,  otherwise
          executes goal R.

in(+Port,?Byte)
          Reads a byte from the specified I/O port.

inc(+N,-X)
          Increments by 1 the number N to the value X.

instance(+Ref,-Term)
          Returns the  term  associated  with  the reference
          number.

int_text(?Integer,?Text)
          Converts an integer to a  string or a string to an
          integer.  If  both   instantiated,   compares  for
          equivalence.

integer(?X)
          Succeeds if X is an integer.


X is E
          Evaluates E and unifies the value with X.

key(+Key,-Ref)
          Returns the reference number for the key.

keyb(-Ascii,-Scan)
          Reads  the next character from the standard  input
          device and returns  the character's ASCII and Scan
          codes.

keyb(-Ascii,-Scan,-/+Flags)
	  Reads the next character from the standard input
          device and returns the character's ASCII and Scan
          codes.  Gives you back a flag that denotes the
          setting of special keys.  Flags denote: 1 right
          shifting key, 2 left shifting key, 4 control key,
          8 Alt key, 16 Scroll Lock active, 32 Num Lock active,
          64 Caps Lock active and 128 Insert Mode is active.

keyb_peek(-Ascii,-Scan)
          Reads  the next character from the standard  input
          device and returns  the character's ASCII and Scan
          codes,  and  does  not  remove  the  key  from the
          buffer.
							    
keyb_peek(-Ascii,-Scan,-/+Flags)
          Reads the next character from the standard input
          device and returns the character's ASCII and Scan
          codes, and does not remove the key from the buffer.
          Also returns a flag that denotes specific key settings
          including: 1 right shift key, 2 left shift key, 4 control
          key, 8 Alt key, 16 Scroll Lock is active, 32 Num Lock
          is active, 64 Cap Lock is active, 128 Insert Mode is
          active.

keys(?Key)
          Returns  the  name  and  arity  for a key  in  the
          current  data  world.  If  Key   is  instantiated,
          succeeds if the key  exists  in  the  current data
          world.

keysort(+L1,-L2)
          Sorts the list L1 in the standard order.  Elements
          of  the  list   must  have  the  form:  Key-Value.
          Duplicates are not merged.    The  sorted  list is
          returned in L2.

leash(+Mode)
          Leashes ports as specified by Mode, where Mode can
          be full, tight, half, or loose.

length(+List,-N)
          Returns the length, N, of a character list.


list_text(?List,?String)
          Converts a list  of  characters  to  a  string, or
          converts  an  atom  or  string   to   a   list  of
          characters.

listing
          Writes to standard output  all  the  predicates in
          the current code world.

listing(+Name)
listing(+Name/Arity)
listing(+[Name/Arity,Name/Arity])
          Writes to standard output all the  clauses  in the
          current code world  for the specified predicate or
          list of predicates.

load_key(+Filename,+Key)
          Loads the contents of files into the database.

lock
          Used for "locking out"  the  ability  for  a Ctrl-
          Break to immediately terminate a program. The lock
          predicate   adds   1   to  the  system's  counting
          semaphore.  Should be  used  in  conjunction  with
          unlock.

mkdir(+Path)
          Creates  a  new  directory.  If  Path  is  a  full
          pathname  (including  drive  name  and   directory
          names), then directory is created as specified. If
          Path is  a name without a path, then the directory
          is created under the current directory.

move_window(+Rows,+Columns)
          Moves the current window the  number  of  rows and
          columns specified.

name(?Atom,?List)
          Converts a list to an  atom or converts an atom or
          integer to a list.

nl
          Writes a newline to the standard output device.

nl(+Handle)
          Writes a newline to the specified file.

nodebug
          Turns the debugger off.

nodebug(+File)
	  Returns the file name you specified and closes the file.          

nonvar(?X)
          Succeeds if X is not an uninstantiated variable.

nospy(+Name)
nospy(+Name/Arity)
          Removes a spy point from the specified predicate.

not(+P)
          Fails if  the goal P can be satisfied; succeeds if
          not.

notrace
          Turns the debugger off.				  

notrace(+File)
	  Returns file name you specified and discontinues tracing.

nref(+Ref,-Next)
          Returns the reference number of the  next  term in
          the chain of terms having the same key.

nth_char(+N,-String,-Char)
          Returns the  ASCII code of a character at offset N
          from the beginning of the string.

nth_ref(+Key,+N,-Ref)
          Returns  the  reference  number  for the term some
          number of positions from the  top  of  a  chain of
          terms.

number(?X)
          Succeeds  when  X  is  either  an  integer   or  a
          floating-point number.

op(+Prec,+Assoc,+Op)
          Defines    the    precedence,     position,    and
          associativity of an operator.

open(-Handle,+Filename,+Access)
          Opens an existing file.  The  Access  argument can
          be:      r - read;     w - write;      a - append;
          rw - read/write; ra - read/append.

out(+Port,+Byte)
          Writes a byte to the specified I/O port.

p_open(-/+Handle,+Filename,+Access)
          Opens the file specified by Filename. If  the file
          isn't  in  the  current directory, p_open searches
          for it in the directories  indicated  in  the path
          specification in the autoexec.bat file.

p_open(-Handle,+Filename,+Type,+Pathvar)
	  Opens the file specified by Filename. Pathvar lets 
	  you include a path variable such as include, help
	  or a path.	  

pref(+Ref,-Prev)
          Returns the reference number for the previous term
          in a chain of terms.

put(+Char)
          Writes  the  character  to  the   standard  output
          device.

put(+Handle,+Char)
          Writes the character to a file.

randomize(+Seed)
          Resets  the  random  number  generator.  The  Seed
          argument is an integer.

read(-Term)
          Reads a term from the standard input device.

read(+Handle,-Term)
          Reads a term from the specified file.

read_line(+Handle,-Line)
          Reads a line from the file specified by Handle.

read_string(+MaxLength,-String)
          Reads a string from the standard input device.

read_string(+Handle,+MaxLength,-String)
          Reads a string from the specified file.

recolor_window(+recolor_Window/+Wattr,+Battr,+Border)
          Changes the background/text and border  attributes
          for the current window.

reconsult(+Filename)
          Reads clauses  into  the  database  from  a  file,
          replacing any predicates that are  already present
          in the database with those clauses that also occur
          in the file.

record_after(+Ref,?Term,-Newref)
          Adds  a  term  after  Ref  and  returns   the  new
          reference number for the added term.

recorda(+Key,?Term,-Ref)
          Adds a term  to  the beginning of a predicate, and
          returns the reference number assigned to the added
          term.

recordb(+Tree_name,+Sort_Key,+Term)
          Records terms in a b-tree.

recorded(+Key,?Term,-Ref)
          Returns   through   backtracking   the  terms  and
          associated reference numbers stored under  a given
          key.

recorded_tro(+Key,?Term,-Ref)
          Returns   through   backtracking   the  terms  and
          associated reference numbers stored under  a given
          key.   The   recorded_tro  predicate   uses   tail
          recursion  optimization  and  thus  can   be  more
          efficient than the recorded predicate.

recordh(+Table_name,+Sort_key,+Term)
          Records terms in a hash table.

recordz(+Key,?Term,-Ref)
          Adds a term to the  end of a predicate and returns
          the reference number assigned to the term.

ref(?X)
          Succeeds when X is a database reference number.

refresh
          Redraws all the windows on the screen.

region_c(+(ULR,ULC),+(LRR,LRC),?String)
          Reads  characters  from  the  current  window  and
          stores them in a non-compacted string.

region_ca(+(ULR,ULC),+(LRR,LRC),?String)
          Reads   characters   and   attributes   from   the
          current_window  and stores  them  in  a  compacted
          string.

region_cc(+(ULR,ULC),+(LRR,LRC),?String)
          Reads  characters  from  the  current  window  and
          stores them in a compacted string.

relabel_window(+Label)
          Changes the label for the current window.

removeallb(+Tree_name)
          Deletes a b-tree.

removeallh(+Table_name)
          Deletes a hash table.

removeb(+Tree_name,+Sort_key,?Term)
          Deletes  a  term  from  a  b-tree.   If   Term  is
          uninstantiated, then the first term under Sort_key
          is deleted.

removeh(+Table_name,+Sort_key,?Term)
          Deletes  a  term  from a hash table.  If  Term  is
          uninstantiated, then the first term under Sort_key
          is deleted.

rename(+Filename,+NewName)
          Changes the name of a file.

repeat
          Always  succeeds,  and  when  encountered   during
          backtracking, always succeeds again.

replace(+Ref,+Term)
          Replaces  the term having the specified  reference
          number with the term given by the Term argument.

replaceb(+Tree_name,+Sort_key,+Old_term,+New_term)
          Replaces the term  at  a specific position in a b-
          tree.

replaceh(+Hashtable,+Key,?Term0,+Term)
	  If Term0 is stored in the hash table under the given
	  key, then it is replaced with Term.

repos_window((+X1,Y1),(+X2,Y2))
	  Repositions current window with the coordinates given.

reset_op
          Returns the operator definitions to  their default
          values.

resetspy
	  Clears all spy points.
  	  
resize_window(+Rows,+Columns)
          Resizes   the  current   window   by   adding   or
          subtracting   the  number  of  rows  and   columns
          indicated.

restore
          Eliminates all changes  made to the database since
          the last time it was saved.

restore(+Name)
          Restores the database specified by Name.

retract(+Clause)
          Removes  the first  occurrence  of  the  specified
          clause from the database.

retrieveb(+Tree_name,?Sort_key,?Term)
          Returns a term from a b-tree.

retrieveh(+Table_name,?Sort_key,?Term)
          Returns a term from a hash table.

rmdir(+Path)
          Deletes a directory.

save
          Saves  all  changes  made  to the current database
          since the last time it was saved.

save(+Name)
          Saves internal database file with the given Name.

screen_height(?/+Old,?/+New)
	  Lets you change screen height to 25, 43(both EGA and VGA),
	  or 50 (VGA only).

searchPath(+PathSpec, +FileSpec, +Flags, -/+CompleteFileSpec)
	  Lets you look for a file on disk.  The PathSpec tells 
	  it how to search.  If you want to know the environ-
          ment variable, you must specify the second flag bit.
	  Flag 1 = Search current directory; Flag 2 = PathSpec
	  is an environment variable; Flag 3 = Search the
	  application directory.

see(+Filename)
          Opens a  file for reading and makes it the current
          input device.

see_h(+Handle)
          The  previously  open  file  specified  by  Handle
          becomes the current input file.

seeing(?Filename)
          Returns the name  of  the file that was opened for
          reading by see. If  you  used  see_h,  then seeing
          will fail.

seek(+Handle,+Offset,+Method,-NewLoc)
          Moves  the  internal file pointer  to  a  specific
          location within a file.  The  Offset  represents a
          relative location within the  file  in  bytes. The
          Method  indicates  point  from  which   Offset  is
          calculated and can be: bof  -  beginning  of file;
          eof - end of file; current - current location.

seen
          Ends input from the current open  file  and closes
          the file.

send_control_msg(+Msg,+Ctrl,+Key)
          Sends  the  messages   specified  by  Msg  to  the
          specified dialog box control.

send_dialog_msg(+Function_name,+Msg,+Key)
          Sends the message specified by Msg  to  the dialog
          box manager.

send_menu_msg(+Msg,-Value)
          Sends a menu message.

set_control(+ControlNum)
	  Informs the dialog box manager that the control has
	  accepted focus.  All subsequent messages are then sent
	  to this control by the dialog box manager.

set_cursor(+Low_scan,+High_scan)
          Changes the shape of the cursor to that defined by
          Low_scan and High_scan.

set_cursorshape(+Shape)
          This predicate lets you change the shape of your cursor
          with one of four selections: 0 hides the cursor, 1 
          specifies a block, 2 specifies a semi-block and 3
          provides an underline

setof(?Term,+Goal,-Set)
          Collects all instances of Term where  the  Goal is
          satisfiable  and returns  those  instances  in  an
          ordered list without duplicates (Set).

setup_editor(+Bkgrnd,+Border,+Status,+ROE,+SOE,+Indent)
          Changes the colors and preference settings of the 
          Arity/Prolog editor.

shell
          Allows  you  to enter the  DOS  environment  while
          maintaining  your current  program  state.    Type
          "exit"  from  MS-DOS to return.    This  predicate
          always succeeds.

shell(+DOSCommand)
          Executes an MS-DOS command and succeeds.

skip(+Char)
          Reads and skips characters from the standard input
          device until Char is found.

skip(+Handle,+Char)
          Reads and skips characters from a file  until Char
          is found.

sort(+L1,-L2)
          Sorts the list L1 in the  standard  order, merging
          duplicates, and returns the sorted list in L2.

spy(+Name)
spy(+Name/Arity)
          Specifies  a  predicate  as   a   spy   point  for
          debugging.

statistics
          Displays  a  window  which   lists   all   of  the
          Arity/Prolog system usage statistics.  Also available
	  in vanilla mode.

statistics(+Info,-Struct)
          Returns  information  about   Arity/Prolog  system
          usage. The Info  argument can be stacks, database,
          page(X) (where X is a page number), local, global,
          trail, atoms, and garbage.

stdin(+Filename,+Goal)
          Redirects  standard input for the duration of  the
          goal.

stdinout(+InFile,+OutFile,+Goal)
          Redirects the standard input  and  output  for the
          duration of the goal.

stdout(+Filename,+Goal)
          Redirects the standard  output for the duration of
          the goal.

store_windows
          Stores the current state of the windows.

string(?X)
          Succeeds if X is a string.

string_length(+String,?Length)
          Returns the length of  the  string.  If  Length is
          instantiated, succeeds if  Length is the length of
          String.

string_search(+SubString,+String,-Location)
          Searches a string for  the  substring  and returns
          the starting point of the string  to  the Location
          argument.   Location   is   offset  from  0.  This
          predicate can backtrack.

string_search(+Case,+SubString,+String,-Location)
          Searches a string for  the  substring  and returns
          the starting point of the string  to  the Location
          argument. Location is offset from  0.  If  Case is
          set to 0, the search is case sensitive. If Case is
          set to 1,  the  search is not case sensitive. This
          predicate can backtrack.

string_term(?String,?Term)
          Converts a string or atom  to a term or converts a
          term to a string.

string_termq(?/+Quotestring,?/+Term)
	  Version of string_term that works like writeq.

substring(+InString,+N,+Length,-OutString)
          Extracts a substring from a string. The N argument
          identifies the beginning of the  substring (string
          characters  are  numbered  from  0).   The  Length
          argument indicates the length of the substring.

syntaxerrors(?Old,?New)
          Enables or disables Arity/Prolog syntax  errors or
          checks the current setting of these messages.

system(?Predicate)
          Determines  whether  Predicate  is  an   evaluable
          predicate. If instantiated, Predicate can  be name
          or name/arity.

tab(+Num)
          Writes a given number of  spaces  to  the standard
          output device. The Num  argument  must  be  in the
          range 0-255.

tab(+Handle,+Num)
          Writes a given  number  of spaces to the file. The
          Num argument must be in the range 0-255.

tchar(-Char,-Attr)
          Returns the character and attribute at the current
          cursor position.

tell(+Filename)
          Opens a  file for writing and makes it the current
          output file.

tell_h(+Handle)
          Writes to the  previously opened file specified by
          Handle.

telling(?Filename)
          Returns the name  of  the file that was opened for
          writing by  tell.  If  tell_h  was  used,  telling
          fails.

tget(?Row,?Column)
          Returns  the coordinates  of  the  current  cursor
          location.

time(?time(Hours,Minutes,Seconds,Hundredths))
          Returns or sets the system clock.

tmove(+Row,+Column)
          Moves the cursor to the specified coordinates.

told
          Closes  the  file   that  is  currently  open  for
          writing.

trace
          Turns the debugger on, initialy set to creep mode.

trace(+File)
	  Turns on tracing, creates new file and stores tracing 
	  information in the file you specified.
	  
true
          This goal always succeeds.

tscroll(+Count,+(ULR,ULC),+(LLR,LRC))
          Scrolls  the  area   defined  by  the  upper  left
          (ULR,ULC) and lower right (LLR,LRC) coordinates by
          the number of lines specified by Count.

unlock
          Subtracts 1 from the system's  counting semaphore.
          Used in conjunction with lock to isolate a portion
          of  code  so that Ctrl-Break  does  terminate  the
          program  until  processing  of  that   portion  is
          complete.

var(?X)
          Determines   whether   X  is   an   uninstantiated
          variable.

wa(+Count,+Attribute)
          Changes the  attribute  byte  for  the  number  of
          character positions specified  by  Count, starting
          from the current cursor location.

wc(+Count,+Char)
          Writes the number of copies  of  the  character to
          the  current  window  starting  from  the  current
          cursor location.

wca(+Count,+Char,+Attribute)
          Writes to  the  standard  output  device  a  given
          number of copies of a character with the specified
          attribute.

what_btrees(-Btree)
          Returns,  through backtracking, the names of  each
          of the existing b-trees.

what_windows(?Name)
          Returns, through  backtracking,  the  name  of the
          windows that currently exist.

what_worlds(?X)
          Returns, through  backtracking,  the  name  of the
          worlds that currently exist.

which_control(-CtrlNum)
          Returns the number of the dialog box  control that
          is in focus.

window_info(?Name,?Label,?(ULR,ULC),?(LRR,LRC),?(Window_attr,Border_attr))
          Returns window information.

window_info(?/+Name,?/+Label,(?/+X1,Y1),(?/+X2,Y2),(?/+AttClient,Attborder),?/+Border)
	  Returns window information including borders.

write(+Term)
          Writes the term to the standard output device.

write(+Handle,+Term)
          Writes the term to the specified file.

write_ctrl_text(+Key,+Label)
          Writes  a  dialog   box  control  label  with  the
          appropriate accelerator key attribute.

write_key(+Key,+File,+Backup)
	  Writes the text key to ASCII file and if Backup is 
	  equal to 1 and there currently exists a version of
	  File, it saves the old file as a .BAK file.

writeq(+Term)
          Writes the term to the standard output device, and
          quotes  atoms  and  functors  as necessary for the
          term to be readable as a Prolog term.

writeq(+Handle,+Term)
          Writes the term to the file specified,  and quotes
          atoms and functors as necessary for the term to be
          readable as a Prolog term.
